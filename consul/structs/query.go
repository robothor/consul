package structs

import (
	"time"
)

const (
	QueryOrderShuffle = "shuffle"
	QueryOrderSort    = "near_agent"
)

const (
	QueryTTLMax = 24 * time.Hour
	QueryTTLMin = 10 * time.Second
)

// QueryDatacenterOptions sets options about how we fail over if there are no
// healthy nodes in the local datacenter.
type QueryDatacenterOptions struct {
	// NearestN is set to the number of remote datacenters to try, based on
	// network coordinates.
	NearestN int

	// Datacenters is a fixed list of datacenters to try after NearestN. We
	// never try a datacenter multiple times, so those are subtracted from
	// this list before proceeding.
	Datacenters []string
}

// QueryDNSOptions controls settings when query results are served over DNS.
type QueryDNSOptions struct {
	// TTL is the time to live for the served DNS results.
	TTL string
}

// ServiceQuery is used to query for a set of healthy nodes offering a specific
// service.
type ServiceQuery struct {
	// Service is the service to query.
	Service string

	// Failover controls what we do if there are no healthy nodes in the
	// local datacenter.
	Failover QueryDatacenterOptions

	// If OnlyPassing is true then we will only include nodes with passing
	// health checks (critical AND warning checks will cause a node to be
	// discarded)
	OnlyPassing bool

	// Tags are a set of required and/or disallowed tags. If a tag is in
	// this list it must be present. If the tag is preceded with "~" then
	// it is disallowed.
	Tags []string

	// Sort has one of the QueryOrder* options which control how the output
	// is sorted. If this is left blank we default to "shuffle".
	Sort string
}

// PreparedQuery defines a complete prepared query, and is the structure we
// maintain in the state store.
type PreparedQuery struct {
	// ID is this UUID-based ID for the query, always generated by Consul.
	ID string

	// Name is an optional friendly name for the query supplied by the
	// user. NOTE - if this feature is used then it will reduce the security
	// of any read ACL associated with this query/service since this name
	// can be used to locate nodes with supplying any ACL.
	Name string

	// Session is an optional session to tie this query's lifetime to. If
	// this is omitted then the query will not expire.
	Session string

	// Token is the ACL token used when the query was created, and it is
	// used when a query is subsequently executed. This token, or a token
	// with management privileges, must be used to change the query later.
	Token string

	// Service defines a service query (leaving things open for other types
	// later).
	Service ServiceQuery

	// DNS has options that control how the results of this query are
	// served over DNS.
	DNS QueryDNSOptions

	RaftIndex
}

type PreparedQueries []*PreparedQuery

type QueryOp string

const (
	QueryCreate QueryOp = "create"
	QueryUpdate         = "update"
	QueryDelete         = "delete"
)

// QueryRequest is used to create or change prepared queries.
type QueryRequest struct {
	Datacenter string
	Op         QueryOp
	Query      PreparedQuery
	WriteRequest
}

// RequestDatacenter returns the datacenter for a given request.
func (q *QueryRequest) RequestDatacenter() string {
	return q.Datacenter
}

// QueryResponse is used to return the ID of an updated query.
type QueryResponse struct {
	ID string
}

// QueryExecuteRequest is used to execute a prepared query.
type QueryExecuteRequest struct {
	Datacenter    string
	QueryIDOrName string
	Source        QuerySource
	QueryOptions
}

// RequestDatacenter returns the datacenter for a given request.
func (q *QueryExecuteRequest) RequestDatacenter() string {
	return q.Datacenter
}

// QueryExecuteRemoteRequest is used when running a local query in a remote
// datacenter. We have to ship the entire query over since it won't be
// present in the remote state store.
type QueryExecuteRemoteRequest struct {
	Datacenter string
	Query      PreparedQuery
	QueryOptions
}

// RequestDatacenter returns the datacenter for a given request.
func (q *QueryExecuteRemoteRequest) RequestDatacenter() string {
	return q.Datacenter
}

// QueryExecuteResponse has the results of executing a query.
type QueryExecuteResponse struct {
	Nodes CheckServiceNodes
	DNS   QueryDNSOptions
}
